
--State
CREATE TABLE mst_state (
    state_id serial PRIMARY KEY  NOT NULL,
    state_name character varying(100) NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL,
    created_on timestamp without time zone DEFAULT ('now'::text)::date NOT NULL
);

ALTER TABLE  mst_state ADD COLUMN updated_on timestamp without time zone;

SELECT MAX(state_id) FROM mst_state;
SELECT nextval('mst_state_state_id_seq');
SELECT setval('mst_state_state_id_seq', (SELECT MAX(state_id) FROM mst_state)+1);


--- District
CREATE TABLE mst_district (
    district_id serial PRIMARY KEY  NOT NULL,
    district_name character varying(100) NOT NULL,
    state_id Integer NOT NULL,
    alert_zone character varying(50),
    is_active boolean DEFAULT true NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL,
    created_on timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    FOREIGN KEY (state_id) REFERENCES mst_state(state_id)

);
SELECT MAX(district_id) FROM mst_district;
SELECT nextval('mst_district_district_id_seq');
SELECT setval('mst_district_district_id_seq', (SELECT MAX(district_id) FROM mst_district)+1);


CREATE TABLE mst_sosdpo (
    sosdpo_id serial PRIMARY KEY  NOT NULL,
    sosdpo_name character varying(100) NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL,
    created_on timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    lastmodifieddate timestamp without time zone,

);


CREATE TABLE mst_policestation (
    ps_id serial PRIMARY KEY  NOT NULL,
    ps_name character varying(100) NOT NULL,
    state_id INTEGER NOT NULL,
    district_id INTEGER NOT NULL,
    sosdpo_id INTEGER NOT NULL,
    active boolean DEFAULT true NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL,
    lastmodifieddate timestamp without time zone,
    FOREIGN KEY (state_id) REFERENCES mst_state(state_id),
    FOREIGN KEY (district_id) REFERENCES mst_district(district_id),
    FOREIGN KEY (sosdpo_id) REFERENCES mst_sosdpo(sosdpo_id)
);

CREATE TABLE mst_beat (
    beat_id serial PRIMARY KEY  NOT NULL,
    beat_name character varying(100) NOT NULL,
    state_id INTEGER NOT NULL,
    district_id INTEGER NOT NULL,
    sosdpo_id INTEGER NOT NULL,
    ps_id INTEGER NOT NULL,
    active boolean DEFAULT true NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL,
    lastmodifieddate timestamp without time zone,
    FOREIGN KEY (state_id) REFERENCES mst_state(state_id),
    FOREIGN KEY (district_id) REFERENCES mst_district(district_id),
    FOREIGN KEY (sosdpo_id) REFERENCES mst_sosdpo(sosdpo_id),
    FOREIGN KEY (ps_id) REFERENCES mst_policestation(ps_id),
);


INSERT INTO mst_policestation (ps_id, ps_name, state_id, district_id, active, createddate,is_deleted) VALUES
(20,	'Police Jubbal',	9,	204,'Y','2020-06-01 17:07:31',	'N')




-- Coming From Locations
CREATE TABLE mst_comingfromlocations (
    comingfromlocation_id serial PRIMARY KEY  NOT NULL,
    comingfromlocation_name character varying(100) NOT NULL,
    active boolean DEFAULT true NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    lastmodifieddate timestamp without time zone,
     is_deleted boolean DEFAULT false NOT NULL
);

--Module

CREATE TABLE mst_module (
    module_id serial PRIMARY KEY  NOT NULL,
    module_name character varying(255) NOT NULL,
	module_icon character varying(255) NOT NULL,
    role_id INTEGER NOT NULL,
    active boolean DEFAULT true NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    lastmodifieddate timestamp without time zone,
	FOREIGN KEY (role_id) REFERENCES roles(role_id)
);

-- Module Role Mapping
CREATE TABLE module_role_mapping(
id SERIAL PRIMARY KEY NOT NULL,
module_id INTEGER NOT NULL,
role_id INTEGER NOT NULL,
active boolean DEFAULT true NOT NULL,
createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
lastmodifieddate timestamp without time zone
FOREIGN KEY (module_id) REFERENCES mst_module(module_id),
FOREIGN KEY (role_id) REFERENCES roles(role_id)

)

CREATE TABLE mst_submodule (
    submodule_id serial PRIMARY KEY  NOT NULL,
    submodule_name character varying(255) NOT NULL,
	submodule_icon character varying(255) NOT NULL,
    module_id INTEGER NOT NULL,
    active boolean DEFAULT true NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL,
    createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    lastmodifieddate timestamp without time zone,
	FOREIGN KEY (module_id) REFERENCES mst_module(module_id)
);




-- Users
CREATE TABLE users(
user_id SERIAL PRIMARY KEY NOT NULL,
first_name character varying(100),
last_name  character varying (100),
username character varying (100),
password character varying (200),
mobile_number INTEGER,
rank character varying(200),
state_id INTEGER NOT NULL,
district_id INTEGER NOT NULL,
beat_id INTEGER NOT NULL,
active boolean DEFAULT true NOT NULL,
createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
lastmodifieddate timestamp without time zone,
FOREIGN KEY (state_id) REFERENCES mst_state(state_id),
FOREIGN KEY (district_id) REFERENCES mst_district(district_id),
FOREIGN KEY (beat_id) REFERENCES mst_beat(beat_id)

);

--Roles
CREATE TABLE roles(
role_id SERIAL PRIMARY KEY NOT NULL,
role_name character varying (15),
role_description character varying (55),
active boolean DEFAULT true NOT NULL,
createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
lastmodifieddate timestamp without time zone

)

-- Role Mapping
CREATE TABLE user_role_mapping(
id SERIAL PRIMARY KEY NOT NULL,
user_id INTEGER NOT NULL,
role_id INTEGER NOT NULL,
active boolean DEFAULT true NOT NULL,
createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
lastmodifieddate timestamp without time zone
FOREIGN KEY (user_id) REFERENCES users(user_id),
FOREIGN KEY (role_id) REFERENCES roles(role_id)

)




####################
--HelpFul Queries
####################


###################################################
########### ID Card Generation ####################
###################################################

--Total Id Cards Via Barrier
SELECT b.barrier_name,count(v.barrier_id) as total_barrier FROM mst_vehicle_owner_entries as v
join mst_barrier as b on v.barrier_id=b.barrier_id group by v.barrier_id,b.barrier_name;

--Month Wise ID Cards Via Barrier
SELECT b.barrier_name,count(v.barrier_id) as total_barrier, date_trunc('month',current_date) FROM mst_vehicle_owner_entries as v
join mst_barrier as b on v.barrier_id=b.barrier_id
WHERE date_trunc('month',v.createddate)=date_trunc('month',current_date)
group by v.barrier_id,b.barrier_name


--Day Wise ID Cards Via Barrier
SELECT b.barrier_name,count(v.barrier_id) as total_barrier FROM mst_vehicle_owner_entries as v
join mst_barrier as b on v.barrier_id=b.barrier_id
WHERE v.createddate=CURRENT_DATE
group by v.barrier_id,b.barrier_name

###################################################
########### Vehicle Type ##########################
###################################################

--ALL Vehlicle Type Id's
SELECT mvt.vehicle_type_name, count(mvoe.vehicle_owner_id) From mst_vehicle_owner_entries mvoe
inner join mst_vehicle_type mvt on mvt.vehicle_type_id=mvoe.vehicle_type_id
group by mvt.vehicle_type_name

-- Monthly
SELECT mvt.vehicle_type_name, count(mvoe.vehicle_owner_id) From mst_vehicle_owner_entries mvoe
inner join mst_vehicle_type mvt on mvt.vehicle_type_id=mvoe.vehicle_type_id
WHERE date_trunc('month',mvoe.createddate)=date_trunc('month',current_date)
group by mvt.vehicle_type_name

-- Daily
SELECT mvt.vehicle_type_name, count(mvoe.vehicle_owner_id) From mst_vehicle_owner_entries mvoe
inner join mst_vehicle_type mvt on mvt.vehicle_type_id=mvoe.vehicle_type_id
WHERE mvoe.createddate=CURRENT_DATE
group by mvt.vehicle_type_name

-- Custom Date
--Date
SELECT to_char(mvoe.createddate, 'DD-MM-YYYY'),mvt.vehicle_type_name, count(mvoe.vehicle_owner_id) From mst_vehicle_owner_entries mvoe
inner join mst_vehicle_type mvt on mvt.vehicle_type_id=mvoe.vehicle_type_id
--WHERE to_char(mvoe.createddate, 'DD/MM/YYYY')='26/06/2020'
group by mvt.vehicle_type_name, to_char(mvoe.createddate, 'DD-MM-YYYY')



###############################################
###########Total Number of boxes barrier wise
###############################################

SELECT sum(boxes) as boxesnumber, b.barrier_name
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,t.barrier_id,sum(t.boxesnumber) as boxes,m.barrier_name
	from vehicle_in_out_trans
	t join mst_barrier
	m on m.barrier_id=t.barrier_id
	group by t.vehicle_owner_id,t.barrier_id,m.barrier_name
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.barrier_id,b.barrier_name
;


-- Monthly
SELECT sum(boxes) as boxesnumber, b.barrier_name
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,t.barrier_id,sum(t.boxesnumber) as boxes,m.barrier_name
	from vehicle_in_out_trans
	t join mst_barrier
	m on m.barrier_id=t.barrier_id
	WHERE date_trunc('month',t.createddate)=date_trunc('month',current_date)
	group by t.vehicle_owner_id,t.barrier_id,m.barrier_name
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.barrier_id,b.barrier_name
;


--Day
SELECT sum(boxes) as boxesnumber, b.barrier_name
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,t.barrier_id,sum(t.boxesnumber) as boxes,m.barrier_name
	from vehicle_in_out_trans
	t join mst_barrier
	m on m.barrier_id=t.barrier_id
	WHERE t.createddate=CURRENT_DATE
	group by t.vehicle_owner_id,t.barrier_id,m.barrier_name
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.barrier_id,b.barrier_name
;

###############################################
###########Total Number of boxes barrier wise ends
###############################################


###############################################
###########Barrier Wise Collection Report
###############################################

-- Barrier Wise Collection Report Total
SELECT b.barrier_name,sum(b.amount) as amount
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,t.barrier_id,sum(t.amount) as amount,
	r.barrier_name
	from user_transaction t
	join mst_barrier r on r.barrier_id=t.barrier_id
	group by r.barrier_name,t.vehicle_owner_id,t.barrier_id
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.barrier_name;


-- Barrier Wise Collection Report Total Current Date
SELECT b.barrier_name,sum(b.amount) as amount
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,t.barrier_id,sum(t.amount) as amount,
	r.barrier_name
	from user_transaction t
	join mst_barrier r on r.barrier_id=t.barrier_id
	WHERE t.paymentdate=CURRENT_DATE
	group by r.barrier_name,t.vehicle_owner_id,t.barrier_id
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.barrier_name;


-- Barrier Wise Collection Report Total Current Month
SELECT b.barrier_name,sum(b.amount) as amount
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,t.barrier_id,sum(t.amount) as amount,
	r.barrier_name
	from user_transaction t
	join mst_barrier r on r.barrier_id=t.barrier_id
	WHERE date_trunc('month',t.paymentdate)=date_trunc('month',current_date)
	group by r.barrier_name,t.vehicle_owner_id,t.barrier_id
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.barrier_name;


###############################################
###########Barrier Wise Collection Report Ends
###############################################



###############################################
###########Vehicle Owner and Amount Queries
###############################################


-- Vehicle Owner and Sum total (Totoal)
SELECT b.vehicle_owner_id,sum(b.amount) as amount
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,sum(t.amount) as amount
	from user_transaction t
	group by t.vehicle_owner_id
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.vehicle_owner_id;


-- Vehicle Owner and Amount Date wise
SELECT b.vehicle_owner_id,sum(b.amount) as amount
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,sum(t.amount) as amount
	from user_transaction t
	WHERE t.paymentdate=CURRENT_DATE group by t.vehicle_owner_id
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.vehicle_owner_id;

-- Collection Total Month Wise
SELECT currentmonth,sum(b.amount) as amount
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,sum(t.amount) as amount,
	to_char(t.paymentdate  ,'Month') as currentmonth
	from user_transaction t
	WHERE date_trunc('month',t.paymentdate)=date_trunc('month',current_date)
	group by t.vehicle_owner_id,t.paymentdate
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.currentmonth;

-- Collection Total Year Wise
SELECT currentmonth,sum(b.amount) as amount
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,sum(t.amount) as amount,
	extract('year' from t.paymentdate) as currentmonth
	from user_transaction t
	WHERE extract('Year' from t.paymentdate)=extract('Year' from current_date)
	group by t.vehicle_owner_id,t.paymentdate
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.currentmonth;



SELECT b.vehicle_owner_id,sum(b.amount) as amount
FROM mst_vehicle_owner_entries
v join (
select t.vehicle_owner_id,sum(t.amount) as amount
	from user_transaction t
	group by t.vehicle_owner_id
) b
on
b.vehicle_owner_id=v.vehicle_owner_id
group by b.vehicle_owner_id;


################################################
###########Vehicle Owner and Amount Queries Ends
################################################


################################################
########### Revenue Officer Report
################################################

SELECT t.*,u.username,m.role_id FROM user_transaction t join users u on t.user_id=u.user_id
join user_role_mapping m on u.user_id=m.user_id join roles r on r.role_id=m.role_id
where t.barrier_id=4 and r.role_name='REVENUE'

SELECT coalesce(sum(t.amount) ,0) as total_collection , to_char(t.paymentdate, 'DD-MM-YYYY')
FROM user_transaction t join users u on t.user_id=u.user_id
join user_role_mapping m on u.user_id=m.user_id join roles r on r.role_id=m.role_id
where t.barrier_id=4 and r.role_name='REVENUE'
--AND to_char(t.paymentdate, 'DD-MM-YYYY') = '05-07-2021'
GROUP BY to_char(t.paymentdate, 'DD-MM-YYYY') , r.role_id;

-- Total Fee Collected Till Date By Revenue Officer
SELECT coalesce(sum(t.amount) ,0) as total_collection
FROM user_transaction t join users u on t.user_id=u.user_id
join user_role_mapping m on u.user_id=m.user_id join roles r on r.role_id=m.role_id
where t.barrier_id=4 and r.role_name='REVENUE'

-- Total Fee Colected Report Day Wise By Revenue Officer
SELECT coalesce(sum(t.amount) ,0) as total_collection , to_char(t.paymentdate, 'DD-MM-YYYY')
FROM user_transaction t join users u on t.user_id=u.user_id
join user_role_mapping m on u.user_id=m.user_id join roles r on r.role_id=m.role_id
where t.barrier_id=4 and r.role_name='REVENUE'
GROUP BY to_char(t.paymentdate, 'DD-MM-YYYY') , r.role_id;

-- Total Fee Colected Report Current Day Wise By Revenue Officer
SELECT coalesce(sum(t.amount) ,0) as total_collection , to_char(t.paymentdate, 'DD-MM-YYYY')
FROM user_transaction t join users u on t.user_id=u.user_id
join user_role_mapping m on u.user_id=m.user_id join roles r on r.role_id=m.role_id
where t.barrier_id=4 and r.role_name='REVENUE'
AND to_char(t.paymentdate, 'DD-MM-YYYY') = '06-07-2021'
GROUP BY to_char(t.paymentdate, 'DD-MM-YYYY') , r.role_id;



################################################
########### Revenue Officer Report Ends
################################################


SELECT * From mst_vehicle_owner_entries WHERE to_char(createddate, 'DD-MM-YYYY')=to_char(DATE  '26/06/2020', 'DD-MM-YYYY')


--Date Wise no of Vehicle types
SELECT mvt.vehicle_type_name, count(mvoe.vehicle_owner_id) From mst_vehicle_owner_entries mvoe
inner join mst_vehicle_type mvt on mvt.vehicle_type_id=mvoe.vehicle_type_id
WHERE to_char(mvoe.createddate, 'DD/MM/YYYY')='26/06/2020' AND mvoe.vehicle_type_id = 1
group by mvt.vehicle_type_name

--Date
SELECT to_char(mvoe.createddate, 'DD-MM-YYYY'),mvt.vehicle_type_name, count(mvoe.vehicle_owner_id) From mst_vehicle_owner_entries mvoe
inner join mst_vehicle_type mvt on mvt.vehicle_type_id=mvoe.vehicle_type_id
--WHERE to_char(mvoe.createddate, 'DD/MM/YYYY')='26/06/2020'
group by mvt.vehicle_type_name, to_char(mvoe.createddate, 'DD-MM-YYYY')



SELECT to_char(mvoe.createddate, 'DD-MM-YYYY'),mvt.vehicle_type_name, count(mvoe.vehicle_owner_id) From mst_vehicle_owner_entries mvoe
inner join mst_vehicle_type mvt on mvt.vehicle_type_id=mvoe.vehicle_type_id
--WHERE to_char(mvoe.createddate, 'DD-MM-YYYY')=to_char(DATE  '26/06/2020', 'DD-MM-YYYY')
group by mvt.vehicle_type_name, to_char(mvoe.createddate, 'DD-MM-YYYY') ORDER BY to_char(mvoe.createddate, 'DD-MM-YYYY') ASC

-- Create Shimla Active and Rest Inactive
update mst_district SET active= false WHERE state_id = 9 AND district_id != 204

-- Insert Shimla Barriers
INSERT INTO mst_barrier ( barrier_name, district_id,barrier_type_id, active) VALUES ('shogi', 204, 1,true);
INSERT INTO mst_barrier ( barrier_name, district_id,barrier_type_id, active) VALUES ('Fagu', 204, 1,true);
INSERT INTO mst_barrier ( barrier_name, district_id,barrier_type_id, active) VALUES ('Balag', 204, 1,true);

-- Check Barriers In Shimla District
SELECT * FROM mst_barrier as barrier
INNER JOIN mst_district as district ON  district.district_id = barrier.district_id
WHERE district.district_id=204;

-- ALter Table Command (Added Two Columns)
ALTER TABLE  mst_vehicle_owner_entries ADD COLUMN vehicle_owner_address character varying (255);
ALTER TABLE  mst_vehicle_owner_entries ADD COLUMN vehicle_driver_address character varying (255);
ALTER TABLE  mst_vehicle_owner_entries ADD COLUMN card_created_on character varying (255);

-- Change Integer to bigint vehicle_owne_entries and transInout

--Logs Table
CREATE TABLE log_vahan_service (
    log_id serial PRIMARY KEY  NOT NULL,
    log_user_id INTEGER NOT NULL,
	log_ip_address  character varying(20),
	log_service_response_code INTEGER NOT NULL,
	log_vehicle_number character varying(40),
	log_application_name character varying(40),
	log_function_name character varying(40),
    is_active boolean NOT NULL DEFAULT true,
    createddate timestamp with time zone NOT NULL DEFAULT now(),
    FOREIGN KEY (log_user_id) REFERENCES users(user_id)

);

-- Change Integer to BigInt log_id

ALTER TABLE  log_vahan_service ADD COLUMN engine_number character varying (100);
ALTER TABLE  log_vahan_service ADD COLUMN chassis_number character varying (100);
ALTER TABLE  log_vahan_service ADD COLUMN rc_status character varying (100);
ALTER TABLE  log_vahan_service ADD COLUMN rc_registered_at character varying (100);
ALTER TABLE  log_vahan_service ADD COLUMN reg_no character varying (100);
ALTER TABLE  log_vahan_service ADD COLUMN rc_fit_upto character varying (100);
ALTER TABLE  log_vahan_service ADD COLUMN rc_status_as_on_date character varying (100);

-- Changes Table
ALTER TABLE  log_vahan_service ADD COLUMN rc_owner_name character varying (100);

-- java -cp x.jar service.App

#####################################################
-- Apple digitalization Updated Queries
#####################################################


--Quieriess to be updated in Server
UPDATE mst_state SET is_active = false WHERE state_id != 9
UPDATE mst_district SET is_active = false WHERE state_id = 9 AND district_id != 204

UPDATE mst_vehicle_type SET vehicle_type_name = 'Pick-Up/ Four-wheeler' WHERE vehicle_type_id = 1
UPDATE mst_vehicle_type SET vehicle_type_name = 'Truck/ Six-wheeler' WHERE vehicle_type_id = 2
INSERT INTO mst_vehicle_type ( vehicle_type_name, active ,createddate, is_deleted) VALUES ('Tralla Truck', true, '2020-06-20 00:00:00',false);

UPDATE mst_vehicle_owner_type SET vehicle_owner_name = 'Owner' WHERE vehicle_owner_type_id = 2







-- Send SMS TABLE
CREATE TABLE sendsmslogs (
    id serial PRIMARY KEY  NOT NULL,
    vehicle_owner_id INTEGER NOT NULL,
	id_card_number character varying(255) NOT NULL,
    vehicle_owner_mobile_number character varying(255),
    sent_message character varying(255),
    cdac_response character varying(255),
    send_time timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
	FOREIGN KEY (vehicle_owner_id) REFERENCES mst_vehicle_owner_entries(vehicle_owner_id)
);

SELECT * FROM  sendsmslogs;

-- Deleete the old  user_transaction and create the new one
CREATE TABLE user_transaction (
    id serial PRIMARY KEY  NOT NULL,
    vehicle_owner_id INTEGER NOT NULL,
    barrier_id INTEGER NOT NULL,
    vehicle_type_id INTEGER NOT NULL,
	user_id INTEGER NOT NULL,
    vehicle_number character varying(255) NOT NULL,
    mobilenumber character varying(255) NOT NULL,
    amount INTEGER NOT NULL,
    payment_mode character varying (100),
    error character varying(255),
    active boolean DEFAULT true NOT NULL,
    paymentdate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    FOREIGN KEY (vehicle_owner_id) REFERENCES mst_vehicle_owner_entries(vehicle_owner_id),
    FOREIGN KEY (barrier_id) REFERENCES mst_barrier(barrier_id),
    FOREIGN KEY (vehicle_type_id) REFERENCES mst_vehicle_type(vehicle_type_id),
	FOREIGN KEY (user_id) REFERENCES users(user_id)

);


-- OTP Table
CREATE TABLE otp_cashsubmit(
id SERIAL PRIMARY KEY NOT NULL,
mobile_number INTEGER NOT NULL,
user_id INTEGER NOT NULL,
otp INTEGER NOT NULL,
otp_message character varying (255) NOT NULL,
cdac_response character varying (255) NOT NULL,
active boolean DEFAULT true NOT NULL,
createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
lastmodifieddate timestamp without time zone
)

-- CashCollection Table
CREATE TABLE cash_collection(
id SERIAL PRIMARY KEY NOT NULL,
user_id INTEGER NOT NULL,
barrier_id INTEGER NOT NULL,
revuser_id INTEGER NOT NULL,
amount INTEGER NOT NULL,
active boolean DEFAULT true NOT NULL,
createddate timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
lastmodifieddate timestamp without time zone,
FOREIGN KEY (barrier_id) REFERENCES mst_barrier(barrier_id),
FOREIGN KEY (user_id) REFERENCES users(user_id),
FOREIGN KEY (revuser_id) REFERENCES users(user_id)
)


== final report
SELECT sum(t.total_collection) as totalcollection,
sum( cc.total_deposited )as totaldeposited,
coalesce(sum(t.total_collection) ,0) - coalesce(sum(cc.total_deposited) ,0) as balance
FROM users u left join
( select sum( amount )as total_deposited,revuser_id from cash_collection group by barrier_id,revuser_id) cc
on u.user_id=cc.revuser_id
join (
	select sum(amount) as total_collection,user_id,barrier_id from user_transaction group by barrier_id,user_id
	 )
t on t.user_id=u.user_id
join user_role_mapping m on u.user_id=m.user_id
join roles r on r.role_id=m.role_id where t.barrier_id=4 and t.user_id=6


== Daily Collection Report partial working
	SELECT  sum(t.total_collection) as totalcollection,
sum( cc.total_deposited )as totaldeposited,
coalesce(sum(t.total_collection) ,0) - coalesce(sum(cc.total_deposited) ,0) as balance,collectiondate,paymentdate
FROM users u left join
( select sum(amount) as total_deposited,revuser_id,to_char(createddate, 'DD/MM/YYYY') as collectiondate
 from cash_collection
 group by barrier_id,revuser_id,to_char(createddate, 'DD/MM/YYYY')
 order by to_char(createddate, 'DD/MM/YYYY') asc ) cc
on u.user_id=cc.revuser_id
left join (
	select sum(amount) as total_collection,user_id,barrier_id, to_char(paymentdate, 'DD/MM/YYYY') as paymentdate
	from user_transaction
	group by barrier_id,user_id,to_char(paymentdate, 'DD/MM/YYYY')
	 order by to_char(paymentdate, 'DD/MM/YYYY') asc
	 )
t on t.user_id=u.user_id  and cc.collectiondate=t.paymentdate
join user_role_mapping m on u.user_id=m.user_id
join roles r on r.role_id=m.role_id where t.barrier_id=4 and t.user_id=6 and t.paymentdate<='07/07/2021'
group by paymentdate,collectiondate,t.user_id




== Working Perfectly
SELECT  coalesce(sum(t.total_collection) ,0) as totalcollection,
coalesce(sum( cc.total_deposited ),0) as totaldeposited,
coalesce(sum(t.total_collection) ,0) - coalesce(sum(cc.total_deposited) ,0) as balance,
CASE WHEN collectiondate IS NULL
    THEN '-'
    ELSE collectiondate END AS collectiondate,
	CASE WHEN paymentdate IS NULL
    THEN '-'
    ELSE paymentdate END AS paymentdate

FROM users u
 join (
	select sum(amount) as total_collection,user_id,barrier_id, to_char(paymentdate, 'DD/MM/YYYY') as paymentdate
	from user_transaction
	group by barrier_id,user_id,to_char(paymentdate, 'DD/MM/YYYY')
	 order by to_char(paymentdate, 'DD/MM/YYYY') asc
	 )
t on t.user_id=u.user_id
left join
( select sum(amount) as total_deposited,revuser_id,to_char(createddate, 'DD/MM/YYYY') as collectiondate
 from cash_collection
 group by barrier_id,revuser_id,to_char(createddate, 'DD/MM/YYYY')
 order by to_char(createddate, 'DD/MM/YYYY') asc ) cc
on u.user_id=cc.revuser_id and cc.collectiondate=t.paymentdate

join user_role_mapping m on u.user_id=m.user_id
join roles r on r.role_id=m.role_id where t.barrier_id=4 and t.user_id=6 and t.paymentdate<='07/07/2021'
group by paymentdate,collectiondate,t.user_id

== Apple Boxes Report Day Wise (Barrier  ID to be implemented)

select
CASE WHEN vehicle_type_id=1
    THEN count(vehicle_type_id)
    ELSE 0 END AS fourwheeler,
	CASE WHEN vehicle_type_id=2
    THEN count(vehicle_type_id)
    ELSE 0 END AS trucks,
	CASE WHEN vehicle_type_id=3
    THEN count(vehicle_type_id)
    ELSE 0 END AS traullas,to_char(paymentdate, 'DD/MM/YYYY') as payment_date,
	coalesce(sum(v.boxesnumber) ,0) as boxes
	from user_transaction t
	left join vehicle_in_out_trans v
	on v.vehicle_owner_id = t.vehicle_owner_id

	group by vehicle_type_id,to_char(paymentdate, 'DD/MM/YYYY')
	order by to_char(paymentdate, 'DD/MM/YYYY') asc


Apple Boxes Updated

 WITH cte_vechile (fourwheeler,trucks,traullas,payment_date,boxes)
	as(
  select CASE WHEN vehicle_type_id=1 THEN CAST( count(vehicle_type_id) AS BIGINT)
  ELSE 0 END AS fourwheeler, CASE WHEN vehicle_type_id=2 THEN CAST(count(vehicle_type_id) AS BIGINT)
  ELSE 0 END AS trucks, CASE WHEN vehicle_type_id=3 THEN CAST(count(vehicle_type_id) AS BIGINT)
  ELSE 0 END AS traullas,to_char(paymentdate, 'DD/MM/YYYY') as payment_date,
  coalesce(sum(v.boxesnumber) ,0) as boxes
		from user_transaction t
  left join vehicle_in_out_trans v on v.vehicle_owner_id = t.vehicle_owner_id
  group by vehicle_type_id,to_char(paymentdate, 'DD/MM/YYYY')  order by to_char(paymentdate, 'DD/MM/YYYY') asc
		)


	 select COALESCE( sum(fourwheeler),0) as  pickups,
	 COALESCE(sum(trucks),0) as trucks, COALESCE(sum(traullas),0) as traullas,
	 payment_date as dated,sum(boxes) as boxes
	 from cte_vechile
	group by payment_date

==================================================================================================
==================================================================================================
Vehicle Report Form B
==================================================================================================

 WITH cte_vechile (comingfromlocation_name,fourwheeler,trucks,traullas,created_date,barrier_id,boxes)
	as(

	 select c.comingfromlocation_name,
	   CASE WHEN v.vehicle_type_id=1 THEN count(v.vehicle_type_id) ELSE 0 END AS fourwheeler,
	   CASE WHEN v.vehicle_type_id=2 THEN count(v.vehicle_type_id) ELSE 0 END AS trucks,
	   CASE WHEN v.vehicle_type_id=3 THEN count(v.vehicle_type_id) ELSE 0 END AS traullas,
	   to_char(t.createddate, 'DD/MM/YYYY') as created_date,v.barrier_id,
		COALESCE( sum(t.boxesnumber),0) as  boxes
	   from vehicle_in_out_trans t
	   left join mst_vehicle_owner_entries v on v.vehicle_owner_id = t.vehicle_owner_id
	   left join mst_comingfromlocations c on c.comingfromlocation_id=t.comingfromlocation_id
	   group by v.vehicle_type_id,c.comingfromlocation_name,to_char(t.createddate, 'DD/MM/YYYY'),v.barrier_id
	   order by to_char(t.createddate, 'DD/MM/YYYY') asc)

	 select comingfromlocation_name, COALESCE( sum(fourwheeler),0) as  pickups,
	 COALESCE(sum(trucks),0) as trucks, COALESCE(sum(traullas),0) as traullas,
	 created_date as dated,sum(boxes) as boxes
	 from cte_vechile where created_date='08/07/2021' --AND barrier_id = 3
	group by created_date,comingfromlocation_name

#########################################################################################################
####################   Spatial Queries ##################################################################
#########################################################################################################

CREATE TABLE mst_locations (
    location_id serial PRIMARY KEY  NOT NULL,
    location_name character varying(100) NOT NULL,
    location_points geometry NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL,
    created_on timestamp without time zone DEFAULT ('now'::text)::date NOT NULL

);


SELECT ST_SetSRID( ST_Point( -71.104, 42.315), 4326)

INSERT INTO mst_locations(location_name, location_points,is_active,is_deleted)
VALUES('Test', ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), true,false);


SELECT ST_AsText(location_points) , location_name
       FROM mst_locations;


SELECT location_id, location_name, location_points, ST_Distance(location_points,
			ST_SetSRID(ST_Point(77.4082178,31.0667738),4326)) AS distance
            FROM mst_locations
            ORDER BY location_points  <-> ST_SetSRID(ST_Point(77.4082178,31.0667738),4326)
            LIMIT 20